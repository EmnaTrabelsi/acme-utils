#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Python ACME RPC Daemon
'''
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler
import socketserver
import subprocess

PYACMED_VERSION = "0.1"

def run_cmd(cmd, arg=""):
    try:
        return subprocess.Popen([cmd, arg], \
                                        stdout = subprocess.PIPE, \
                                        stderr= subprocess.PIPE).communicate()
    except:
        return False

class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/acme',)

class SimpleThreadedXMLRPCServer(socketserver.ThreadingMixIn, SimpleXMLRPCServer):
        pass

# Create server
server = SimpleThreadedXMLRPCServer(("0.0.0.0", 8000),
                                    requestHandler=RequestHandler)
server.register_introspection_functions()

# Info function, get ACME info string
def version():
	return PYACMED_VERSION
server.register_function(version)

# Dump the probe configuration
def info(probe):
	if int(probe) < 1:
		return "Please provide a probe number >= 1"
	(txt, err) = run_cmd("dut-dump-probe", probe)
	if txt:
		return txt.decode("utf-8").rstrip()
	else:
		return "Failed (%s)" % err.decode("utf-8").rstrip()
server.register_function(info)

# Switch Probe On, takes <probe> id as argument
def switch_on(probe):
	if int(probe) < 1:
		return "Please provide a probe number >= 1"
	(txt, err) = run_cmd("dut-switch-on", probe)
	if not err:
		return "Success"
	else:
		return "Failed (%s)" % err.decode("utf-8").rstrip()
server.register_function(switch_on)

# Switch Probe Off, takes <probe> id as argument
def switch_off(probe):
	if int(probe) < 1:
		return "Please provide a probe number >= 1"
	(txt, err) = run_cmd("dut-switch-off", probe)
	if not err:
		return "Success"
	else:
		return "Failed (%s)" % err.decode("utf-8").rstrip()
server.register_function(switch_off)

# System software reboot
def system_reboot():
	run_cmd("reboot")
server.register_function(system_reboot)

# Run the server's main loop
server.serve_forever()
